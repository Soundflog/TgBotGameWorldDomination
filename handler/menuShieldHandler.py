from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

from buttons.inlinebuttons.FormMainButton import in_Form_Main_Keyboard, \
    in_Form_Shield_TrueFalse
from methods.ReCalcBalance import RocketCalc, BalanceInNewRound, BalanceCalc
from states.WorldStates import CountryStates

router = Router()


# ============================ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–º—Å –©–ò–¢–û–í ==========================
@router.callback_query(lambda c: c.data == 'main_shield', CountryStates.main_keyboard)
async def shield_menu_callback(call: CallbackQuery, state: CountryStates.main_keyboard):
    await call.message.edit_reply_markup()
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    city_Info = country_Info['friendlyCities']
    BalanceCalc(country_Info, getFormCountry['countryInfo']['balance'])
    textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                    f"{country_Info['title']}\n" \
                    f"üí∏ {country_Info['balanceInfo']}üí≤\n\n" \
                    f"üõ°Ô∏è<b>–©–∏—Ç—ã</b>üõ°Ô∏è\n" \
                    f"<b>300$</b>\n\n"
    for city in city_Info:
        textForEdited += f"<b>{city['title'] if city['condition'] else '<s>' + city['title'] + '</s>'}</b>\n" \
                         f"üõ°Ô∏è –©–∏—Ç: {'‚úîÔ∏è' if city['shieldInfo'] else '‚ùå'} ---> " \
                         f"{'‚úîÔ∏è' if city['shield'] or city['shieldInfo'] else '‚ùå'}\n\n"
    await call.message.edit_text(
        text=textForEdited,
        parse_mode=ParseMode.HTML,
        inline_message_id=call.inline_message_id,
        reply_markup=in_Form_Shield_TrueFalse(city_Info)
    )


@router.callback_query(lambda c: c.data.startswith("city_shield_"), CountryStates.main_keyboard)
async def callback_city_shield(call: CallbackQuery, state: CountryStates.main_keyboard):
    await call.message.edit_reply_markup()
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    city_Info = country_Info['friendlyCities']
    split_callback_data = call.data.split('_')
    city_id = int(split_callback_data[2])
    selected_cities_shield = user_data.get('selectedShield')
    if selected_cities_shield is not None:
        selected_cities_shield = user_data['selectedShield']
    else:
        selected_cities_shield = []
        # for fCity in country_Info['friendlyCities']:
        #     if fCity['shieldInfo'] is True:
        #         selected_cities_shield.append(fCity)
    for city in city_Info:
        if city["cityId"] == city_id and city['shield'] is False:
            country_Info['balanceInfo'] -= 300
            city['shield'] = True
            selected_cities_shield.append(city)
            await call.answer(
                text=f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω —â–∏—Ç –Ω–∞ –≥–æ—Ä–æ–¥ {city['title']}"
            )
        if city["cityId"] == city_id and city['shield'] is True:
            country_Info['balanceInfo'] += 300
            city['shield'] = False
            selected_cities_shield.remove(city)
            await call.answer(
                text=f"–£–±—Ä–∞–Ω —â–∏—Ç –Ω–∞ –≥–æ—Ä–æ–¥ {city['title']}"
            )
    BalanceCalc(country_Info, getFormCountry['countryInfo']['balance'])
    textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n{country_Info['title']}\n" \
                    f"üí∏{country_Info['balanceInfo']} üí≤\n\n" \
                    f"üõ°Ô∏è<b>–©–∏—Ç—ã</b>üõ°Ô∏è\n" \
                    f"<b>300 üí≤</b>\n\n"
    for city in city_Info:
        textForEdited += f"<b>{city['title'] if city['condition'] else '<s>' + city['title'] + '</s>'}</b>\n" \
                         f"üõ°Ô∏è –©–∏—Ç: {'‚úîÔ∏è ' if city['shieldInfo'] else '‚ùå'} ---> " \
                         f"{'‚úîÔ∏è' if city['shield'] or city['shieldInfo'] else '‚ùå'}\n\n"

    await call.message.edit_text(
        text=textForEdited,
        inline_message_id=call.inline_message_id,
        parse_mode=ParseMode.HTML,
        reply_markup=in_Form_Shield_TrueFalse(city_Info)
    )
    await state.update_data(selectedShield=selected_cities_shield)


# ======================================= BACK TO MENU =======================
@router.callback_query(lambda c: c.data == "shield_menu", CountryStates.main_keyboard)
async def callback_shield_back_to_menu(call: CallbackQuery, state: CountryStates.main_keyboard):
    await call.message.edit_reply_markup()
    user_data = await state.get_data()
    world = user_data['world']
    ecology = world['ecology']
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    city_Info = country_Info['friendlyCities']
    rockets = RocketCalc(country_Info)
    incomeBalance = BalanceInNewRound(country_Info, ecology)
    BalanceCalc(country_Info, getFormCountry['countryInfo']['balance'])
    averageLifeStandardList = []
    for c in city_Info:
        averageLifeStandardList.append(c['lifestandard'])
    textForEdited = f"üåç –ú–∏—Ä üåç\n" \
                    f"{world['title']}\n\n" \
                    f"üå± –≠–∫–æ–ª–æ–≥–∏—è: <b>{round(ecology, 2)} %</b>\n\n" \
                    f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                    f"<b>{country_Info['title']}</b>\n\n" \
                    f"üí∏ –ë–∞–ª–∞–Ω—Å: <b>{country_Info['balanceInfo']}</b> $ (+<b>{round(incomeBalance)}</b> $)\n" \
                    f"üöÄ –†–∞–∫–µ—Ç: <b>{rockets}</b> | {country_Info['rocket']}\n" \
                    f"üåø –£—Ä. –∂–∏–∑–Ω–∏: <b>{round(sum(averageLifeStandardList)*ecology/400)}</b> %\n\n" \
                    f"üèôÔ∏è –ì–æ—Ä–æ–¥–∞ üèôÔ∏è\n"
    for city in city_Info:
        textForEdited += f"<b>{city['title'] if city['condition'] else '<s>' + city['title'] + '</s>'}</b>\n" \
                         f"üåø –†–∞–∑–≤–∏—Ç–∏–µ: {str(city['lifestandard']) + ' + 20 ' if city['development'] else city['lifestandard']} %\n" \
                         f"üõ°Ô∏è –©–∏—Ç: {'‚úîÔ∏è ' if city['shieldInfo'] else '‚ùå'} ---> " \
                         f"{'‚úîÔ∏è' if city['shield'] or city['shieldInfo'] else '‚ùå'}\n\n"
    textForEdited += "<i>–í–µ–¥—É—â–∏–π —Å–æ–æ–±—â–∏—Ç –í–∞–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–±–Ω–æ–≤–∏—Ç—å</b> " \
                     "–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞</i>"
    await call.message.edit_text(
        text=textForEdited,
        inline_message_id=call.inline_message_id,
        parse_mode=ParseMode.HTML,
        reply_markup=in_Form_Main_Keyboard()
    )
