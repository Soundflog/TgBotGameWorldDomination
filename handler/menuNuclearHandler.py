from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

from buttons.inlinebuttons.FormMainButton import in_Form_Shield_TrueFalse, in_Form_Nuclear_TrueFalse, \
    in_Form_Bomb_Enemy, in_Form_Bomb_Enemy_Cities
from states.WorldStates import CountryStates

router = Router()


# ============================ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–º—Å –Ø–î–ï–†–ù–û–ô –ü–†–û–ì–†–ê–ú–ú–´ ==========================
@router.callback_query(lambda c: c.data == 'main_nuclearProgram', CountryStates.main_keyboard)
async def nuclear_menu_callback(call: CallbackQuery, state: CountryStates.main_keyboard):
    await call.message.edit_reply_markup()
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    city_Info = country_Info['friendlyCities']
    textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                    f"{country_Info['title']}\n" \
                    f"üí∏ {country_Info['balanceInfo']} üí≤\n\n" \
                    f"‚ò¢Ô∏è<b>–Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>‚ò¢Ô∏è\n" \
                    f"–¶–µ–Ω—ã: \n" \
                    f"–†–∞–∑–≤–∏—Ç–∏–µ --- <b> 500 üí≤</b>\n" \
                    f"–†–∞–∫–µ—Ç–∞ --- <b> 150 üí≤</b>\n\n"
    textForEdited += f"–†–∞–∑–≤–∏—Ç–∞ —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: {country_Info['nuclearProgramInfo']} ---> {country_Info['nuclearProgram']}\n" \
                     f"–†–∞–∫–µ—Ç: {country_Info['rocketInfo']} ---> {country_Info['rocket']}"
    await call.message.edit_text(
        text=textForEdited,
        parse_mode=ParseMode.HTML,
        inline_message_id=call.inline_message_id,
        reply_markup=in_Form_Nuclear_TrueFalse(country_Info)
    )


# ========================================== –†–ê–ó–í–ò–¢–¨ –Ø–î–ï–†–ù–£–Æ =============================
@router.callback_query(lambda c: c.data == "rocket_development", CountryStates.main_keyboard)
async def callback_nuclear_development(call: CallbackQuery, state: CountryStates.main_keyboard):
    await call.message.edit_reply_markup()
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    # Nuclear Program
    if country_Info['nuclearProgram'] is False:
        country_Info['nuclearProgram'] = True
        country_Info['balanceInfo'] -= 500
    else:
        country_Info['nuclearProgram'] = False
        country_Info['balanceInfo'] += 500

    textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                    f"{country_Info['title']}\n" \
                    f"üí∏ {country_Info['balanceInfo']} üí≤\n\n" \
                    f"‚ò¢Ô∏è<b>–Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>‚ò¢Ô∏è\n" \
                    f"–¶–µ–Ω—ã: \n" \
                    f"–†–∞–∑–≤–∏—Ç–∏–µ --- <b> 500 üí≤</b>\n" \
                    f"–†–∞–∫–µ—Ç–∞ --- <b> 150 üí≤</b>\n\n"
    textForEdited += f"–†–∞–∑–≤–∏—Ç–∏–µ —è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {'‚úîÔ∏è' if country_Info['nuclearProgramInfo'] else '‚ùå'} " \
                     f"---> {'‚úîÔ∏è' if country_Info['nuclearProgram'] else '‚ùå'}\n" \
                     f"–†–∞–∫–µ—Ç: {country_Info['rocketInfo']} ---> {country_Info['rocket']}"
    # {'‚úîÔ∏è' if city['shieldInfo'] else '‚ùå'} ---> {'‚úîÔ∏è' if city['shield'] else '‚ùå'}
    await call.message.edit_text(
        text=textForEdited,
        parse_mode=ParseMode.HTML,
        inline_message_id=call.inline_message_id,
        reply_markup=in_Form_Nuclear_TrueFalse(country_Info)
    )


# ============================================ –ü–†–û–ò–ó–í–ï–°–¢–ò –†–ê–ö–ï–¢–£ ===================
@router.callback_query(lambda c: c.data == "rocket_add", CountryStates.main_keyboard)
async def callback_nuclear_add(call: CallbackQuery, state: CountryStates.main_keyboard):
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    # Nuclear Program
    if country_Info['nuclearProgram'] is False:
        await call.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
                 "–†–∞–∑–≤–∏—Ç–∏–µ —è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã 1 —Ä–∞—É–Ω–¥",
            show_alert=True
        )
    selected_rocket_add = user_data.get('selectedRocketAdd')
    if selected_rocket_add is not None:
        selected_rocket_add = user_data['selectedRocketAdd']
    else:
        selected_rocket_add = []
    # TODO: *FIX* –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å if –≤—Å–µ–≥–¥–∞
    if country_Info['nuclearProgramInfo'] is True and len(selected_rocket_add) < 3:
        country_Info['rocket'] += 1
        country_Info['balanceInfo'] -= 150
        selected_rocket_add.append(1)
        await call.answer(
            text="+1 –†–∞–∫–µ—Ç–∞"
        )
        textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                        f"{country_Info['title']}\n" \
                        f"üí∏ {country_Info['balanceInfo']} üí≤\n\n" \
                        f"‚ò¢Ô∏è<b>–Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>‚ò¢Ô∏è\n" \
                        f"–¶–µ–Ω—ã: \n" \
                        f"–†–∞–∑–≤–∏—Ç–∏–µ --- <b> 500 üí≤</b>\n" \
                        f"–†–∞–∫–µ—Ç–∞ --- <b> 150 üí≤</b>\n\n"
        textForEdited += f"–†–∞–∑–≤–∏—Ç–∞ —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: " \
                         f"{'‚úîÔ∏è' if country_Info['nuclearProgramInfo'] else '‚ùå'} ---> " \
                         f"{'‚úîÔ∏è' if country_Info['nuclearProgram'] else '‚ùå'}\n" \
                         f"–†–∞–∫–µ—Ç: {country_Info['rocketInfo']} ---> {country_Info['rocket']}"
        await call.message.edit_text(
            text=textForEdited,
            parse_mode=ParseMode.HTML,
            inline_message_id=call.inline_message_id,
            reply_markup=in_Form_Nuclear_TrueFalse(country_Info)
        )
        await state.update_data(selectedRocketAdd=selected_rocket_add)
    else:
        await call.answer(
            text="–ù–µ –±–æ–ª—å—à–µ 3 —Ä–∞–∫–µ—Ç –∑–∞ —Ä–∞—É–Ω–¥"
        )


# ========================================= –£–ë–†–ê–¢–¨ –†–ê–ö–ï–¢–£ =========================
@router.callback_query(lambda c: c.data == "rocket_remove", CountryStates.main_keyboard)
async def callback_nuclear_remove(call: CallbackQuery, state: CountryStates.main_keyboard):
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    # Nuclear Program
    if country_Info['nuclearProgram'] is False:
        await call.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
                 "–†–∞–∑–≤–∏—Ç–∏–µ —è–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã 1 —Ä–∞—É–Ω–¥",
            show_alert=True
        )
    selected_rocket_add = user_data.get('selectedRocketAdd')
    if selected_rocket_add is not None:
        selected_rocket_add = user_data['selectedRocketAdd']
    else:
        selected_rocket_add = []
    # TODO: *FIX* –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å if –≤—Å–µ–≥–¥–∞
    if country_Info['nuclearProgramInfo'] is True and 3 > len(selected_rocket_add) > 0:
        country_Info['rocket'] -= 1
        country_Info['balanceInfo'] += 150
        selected_rocket_add.remove(1)
        await call.answer(
            text="-1 –†–∞–∫–µ—Ç–∞"
        )
        textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                        f"{country_Info['title']}\n" \
                        f"üí∏ {country_Info['balanceInfo']} üí≤\n\n" \
                        f"‚ò¢Ô∏è<b>–Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>‚ò¢Ô∏è\n" \
                        f"–¶–µ–Ω—ã: \n" \
                        f"–†–∞–∑–≤–∏—Ç–∏–µ --- <b> 500 üí≤</b>\n" \
                        f"–†–∞–∫–µ—Ç–∞ --- <b> 150 üí≤</b>\n\n"
        textForEdited += f"–†–∞–∑–≤–∏—Ç–∞ —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: " \
                         f"{'‚úîÔ∏è' if country_Info['nuclearProgramInfo'] else '‚ùå'} ---> " \
                         f"{'‚úîÔ∏è' if country_Info['nuclearProgram'] else '‚ùå'}\n" \
                         f"–†–∞–∫–µ—Ç: {country_Info['rocketInfo']} ---> {country_Info['rocket']}"

        await call.message.edit_text(
            text=textForEdited,
            parse_mode=ParseMode.HTML,
            inline_message_id=call.inline_message_id,
            reply_markup=in_Form_Nuclear_TrueFalse(country_Info)
        )
        await state.update_data(selectedRocketAdd=selected_rocket_add)
    else:
        await call.answer(
            text="–ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ 0"
        )


# ========================================= –ë–û–ú–ë–ò–¢–¨ =========================
@router.callback_query(lambda c: c.data == "rocket_bomb", CountryStates.main_keyboard)
async def callback_nuclear_bomb(call: CallbackQuery, state: CountryStates.main_keyboard):
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    textForEdited = f"üó∫Ô∏è –°—Ç—Ä–∞–Ω–∞ üó∫Ô∏è\n" \
                    f"{country_Info['title']}\n" \
                    f"üí∏ {country_Info['balanceInfo']} üí≤\n\n" \
                    f"‚ò¢Ô∏è<b>–Ø–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>‚ò¢Ô∏è\n" \
                    f"–¶–µ–Ω—ã: \n" \
                    f"–†–∞–∑–≤–∏—Ç–∏–µ --- <b> 500 üí≤</b>\n" \
                    f"–†–∞–∫–µ—Ç–∞ --- <b> 150 üí≤</b>\n\n"
    textForEdited += f"–†–∞–∑–≤–∏—Ç–∞ —è–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: " \
                     f"{'‚úîÔ∏è' if country_Info['nuclearProgramInfo'] else '‚ùå'} ---> " \
                     f"{'‚úîÔ∏è' if country_Info['nuclearProgram'] else '‚ùå'}\n" \
                     f"–†–∞–∫–µ—Ç: {country_Info['rocketInfo']} ---> {country_Info['rocket']}"
    if country_Info['rocketInfo'] > 0:
        await call.message.edit_text(
            text=textForEdited,
            inline_message_id=call.inline_message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=in_Form_Bomb_Enemy(country_Info['enemyCountries'])
        )
    else:
        await call.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∫–µ—Ç",
            show_alert=True
        )


# =================================== –í–´–ë–û–† –ö–ê–ö–£–Æ –°–¢–†–ê–ù–£ –ë–û–ú–ë–ò–¢–¨ ==================
@router.callback_query(lambda c: c.data.startswith("country_bomb_"), CountryStates.main_keyboard)
async def callback_nuclear_bomb(call: CallbackQuery, state: CountryStates.main_keyboard):
    user_data = await state.get_data()
    getFormCountry = user_data['form']
    country_Info = getFormCountry['form']
    split_callback_data = call.data.split('_')
    country_id_for_bomb = int(split_callback_data[2])
    enemy_Countries = country_Info['enemyCountries']
    for enemyCountry in enemy_Countries:
        if enemyCountry['countryId'] == country_id_for_bomb:
            textForEdited = f"–ë–û–ú–ë–ò–¢–¨\n" \
                            f"{enemyCountry['title']}\n\n" \
                            f"–ì–û–†–û–î–ê\n"
            for enemyCity in enemyCountry['enemyCities']:
                textForEdited += f"<b>{enemyCity['title']}</b>\n" \
                                 f"üåø –£—Ä. –∂–∏–∑–Ω–∏: {enemyCity['lifestandard']} %\n" \
                                 f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úîÔ∏è' if enemyCity['condition'] else '‚ùå'}\n" \
                                 f"üí£ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ–º–±–∞: {'‚úîÔ∏è' if enemyCity['bomb'] else '‚ùå'}\n\n"
            await call.message.edit_text(
                text=textForEdited,
                parse_mode=ParseMode.HTML,
                inline_message_id=call.inline_message_id,
                reply_markup=in_Form_Bomb_Enemy_Cities(enemyCountry['enemyCities'])
            )
        continue
    await call.answer()
